@mixin generateColumnsAndRows($breakpoint: null) {
  @for $i from 1 through $bp-grid-cols-static {
    // implicit columns/rows
    [#{$layout}~='#{$cols}:#{$i}#{$breakpoint}'] > * {
      grid-column: span $i / span $i;
    }

    [#{$layout}~='#{$rows}:#{$i}#{$breakpoint}'] > * {
      grid-row: span $i / span $i;
    }
  }
}

@mixin generateExplicitColumnAndRow($breakpoint: null) {
  @for $i from 1 through $bp-grid-cols-static {
    // explicit column/row positions
    [#{$layout}~='#{$col}:#{$i}#{$breakpoint}'] {
      grid-column: span $i / span $i;
    }

    [#{$layout}~='#{$row}:#{$i}#{$breakpoint}'] {
      grid-row: span $i / span $i;
    }
  }
}

@mixin generatePositions($breakpoint: null) {
  // +1 for grid cols/rows which end at beginning of next item
  @for $i from 1 through $bp-grid-cols-static + 1 {
    [#{$layout}~='#{$col}:start-#{$i}#{$breakpoint}'] {
      grid-column-start: $i;
    }

    [#{$layout}~='#{$col}:end-#{$i}#{$breakpoint}'] {
      grid-column-end: $i;
    }

    [#{$layout}~='#{$row}:start-#{$i}#{$breakpoint}'] {
      grid-row-start: $i;
    }

    [#{$layout}~='#{$row}:end-#{$i}#{$breakpoint}'] {
      grid-row-end: $i;
    }
  }
}

@mixin generateAlignments($breakpoint: null) {
  [#{$layout}~='#{$grid}'] {
    &[#{$layout}~='#{$block}:#{$start}#{$breakpoint}'] {
      align-content: start;
    }

    &[#{$layout}~='#{$inline}:#{$end}#{$breakpoint}'] {
      justify-content: end;
    }

    &[#{$layout}~='#{$block}:#{$end}#{$breakpoint}'] {
      align-content: end;
    }

    &[#{$layout}~='#{$inline}:#{$start}'] {
      justify-content: start;
    }

    &[#{$layout}~='#{$block}:#{$center}#{$breakpoint}'] {
      align-items: center;
      align-content: center;
    }

    &[#{$layout}~='#{$inline}:#{$center}#{$breakpoint}'] {
      justify-items: center;
      justify-content: center;
    }

    &[#{$layout}~='#{$center}#{$breakpoint}'] {
      align-items: center;
      align-content: center;
      justify-items: center;
      justify-content: center;
    }

    &[#{$layout}~='#{$block}:#{$stretch}#{$breakpoint}'] {
      align-items: stretch;
      align-content: stretch;
    }

    &[#{$layout}~='#{$inline}:#{$stretch}#{$breakpoint}'] {
      justify-items: stretch;
      justify-content: stretch;
    }

    &[#{$layout}~='#{$stretch}#{$breakpoint}'] {
      align-items: stretch;
      align-content: stretch;
      justify-items: stretch;
      justify-content: stretch;
    }
  }
}

[#{$layout}~='#{$grid}'] {
  container-type: inline-size;
  display: grid;
  align-items: start;
  align-content: start;
  justify-content: initial;
  grid-template-columns: repeat($bp-grid-cols, 1fr);
  width: 100%;

  &[#{$layout}*='#{$rows}'] {
    grid-template-rows: repeat(12, auto);
  }

  & > [#{$layout}*='#{$row}'] {
    align-self: stretch;
  }

  &[#{$layout}~='#{$cols}:auto'] {
    grid-auto-flow: column;
    grid-template-columns: initial;
  }
}

// [#{$layout}*='#{$cols}'] > * {
//   grid-column: span $bp-grid-cols;
// }

[#{$layout}*='#{$col}'] {
  grid-column: span 12;
}

@include generateColumnsAndRows();
@include generateExplicitColumnAndRow();
@include generatePositions();
@include generateAlignments();

@each $breakpoint, $breakpoint-value in $bp-layout-breakpoints {
  @include container($breakpoint-value) {
    @include generateColumnsAndRows($breakpoint);
  }
}

@each $breakpoint, $breakpoint-value in $bp-layout-breakpoints {
  @include container($breakpoint-value) {
    @include generateExplicitColumnAndRow($breakpoint);
  }
}

@each $breakpoint, $breakpoint-value in $bp-layout-breakpoints {
  @include container($breakpoint-value) {
    @include generatePositions($breakpoint);
  }
}

@each $breakpoint, $breakpoint-value in $bp-layout-breakpoints {
  @include container($breakpoint-value) {
    @include generateAlignments($breakpoint);
  }
}
